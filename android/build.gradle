group = "com.drivequant.drivekit"
version = "1.0-SNAPSHOT"

def sdkProperties = new Properties()
def sdkPropertiesFile = rootProject.file('sdk.properties')
if (sdkPropertiesFile.exists()) {
    sdkPropertiesFile.withReader('UTF-8') { reader ->
        sdkProperties.load(reader)
    }
}

def minSdkVersion = sdkProperties.getProperty('flutter.minSdkVersion')?.toInteger()
if (minSdkVersion == null) {
    minSdkVersion = 25
}

def targetSdkVersion = sdkProperties.getProperty('flutter.targetSdkVersion')?.toInteger()
if (targetSdkVersion == null) {
    targetSdkVersion = 34
}

def compileSdkVersion = sdkProperties.getProperty('flutter.compileSdkVersion')?.toInteger()
if (compileSdkVersion == null) {
    compileSdkVersion = 34
}

buildscript {
    ext.kotlin_version = "1.7.10"
    ext.drivekit_version = "2.4-beta1"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:7.3.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.allprojects {
    repositories {
        maven {
            url "https://maven.drivequant.com/repository/android-sdk/"
        }
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    if (project.android.hasProperty("namespace")) {
        namespace = "com.drivequant.drivekit"
    }

    compileSdk = compileSdkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = minSdkVersion
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")

        api "com.drivequant.drivekit:drivekit-trip-analysis:$drivekit_version"
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
